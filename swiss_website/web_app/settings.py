"""
Django settings for web_app project.

Generated by 'django-admin startproject' using Django 1.10.6.

For more information on this file, see
https://docs.djangoproject.com/en/1.10/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.10/ref/settings/
"""
import os

import graypy
import sentry_sdk
from sentry_sdk.integrations.django import DjangoIntegration


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.10/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('CONFIG_SECRET_KEY', 'lf*73=z5w8i)d#vin62dc7i4n=gptg5q59-(vs(g(myb27a@8@')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True if os.environ.get('CONFIG_DEBUG', 'False').lower() == 'true' else False

ALLOWED_HOSTS = [os.environ.get('CONFIG_ALLOWED_HOST', '*')]

EMAIL_HOST = os.environ.get('CONFIG_EMAIL_HOST')
EMAIL_HOST_PASSWORD = os.environ.get('CONFIG_EMAIL_HOST_PASSWORD')
EMAIL_HOST_USER = os.environ.get('CONFIG_EMAIL_HOST_USER')
EMAIL_PORT = int(os.environ.get('CONFIG_EMAIL_PORT'))
EMAIL_USE_TLS = True
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER

WEBSOCKET_HOST = os.environ.get('CONFIG_WEBSOCKET_HOST', 'localhost')
WEBSOCKET_PORT = os.environ.get('CONFIG_WEBSOCKET_PORT', 8081)

#EMAIL_TARGET = 'dobre@autazeszwajcarii.pl'
EMAIL_TARGET = 'azs@metrohost.pl'
#EMAIL_ADMIN = 'dobre@autazeszwajcarii.pl'
#EMAIL_REPLY_TO = 'AutaZeSzwajcarii.pl <noreply.autazeszwajcarii@gmail.com>'

# DEV BELOW
EMAIL_ADMIN = 'dobre@autazeszwajcarii.pl'
EMAIL_NORESPONSE = 'AutaZeSzwajcarii.pl <dobre@autazeszwajcarii.pl>'
EMAIL_FROM_BOT = 'AutaZeSzwajcarii.pl - Formularz Kontaktowy <dev@autazeszwajcarii.pl>'

# GOOGLE reCAPTCHAv3
GOOGLE_RECAPTCHA_SITE_KEY = os.environ.get('CONFIG_GOOGLE_RECAPTCHA_SITE_KEY')
GOOGLE_RECAPTCHA_SECRET_KEY = os.environ.get('CONFIG_GOOGLE_RECAPTCHA_SECRET_KEY')

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework.authtoken',
    'django_admin_json_editor',
    'rest_api',
    'website',
    'reset_migrations',
    'dbbackup',
    'report_builder',
    'debug_toolbar',
]

# AUTHENTICATION_BACKENDS = ['web_app.custom_backend.CustomBackend']

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '%(asctime)s - ' +  os.environ.get('CONFIG_HOSTNAME') + ' - ' + os.environ.get('CONFIG_ENVIRONMENT') + ' - %(levelname)s - %(message)s'
        },
    },
    'handlers': {
        'graypy': {
            'level': os.environ.get('CONFIG_DJANGO_LOG_LEVEL', 'INFO'),
            'formatter': os.environ.get('CONFIG_LOGGING_FORMATTER', 'verbose'),
            'class': 'graypy.GELFUDPHandler',
            'host': os.environ.get('CONFIG_GRAYLOG_HOST', 'host.docker.internal'),
            'port': int(os.environ.get('CONFIG_GRAYLOG_GELFUDP_PORT', 12201))
        },
        'file': {
            'level':"DEBUG",
            'class':'logging.FileHandler',
            'filename':'/web_apps/log-message'
        }
    },
    'loggers': {
        '': {
            'handlers': ['graypy', 'file'],
            'level': os.environ.get('CONFIG_DJANGO_LOG_LEVEL', 'INFO'),
            'propagate': True,
        },
    },
}

REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated'
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',  # TODO remove on production
    ),
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    'PAGE_SIZE': 20
}

MIDDLEWARE = [
    'debug_toolbar.middleware.DebugToolbarMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'rest_api.middleware.CampaignTrackingMiddleware',
]

'''
# old cache - to remove
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
        'LOCATION': '/var/tmp/django_cache',
        'TIMEOUT': 300,
        'OPTIONS': {
            'MAX_ENTRIES': 1000
        }
    }
}
'''
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'unique-snowflake',
    }
}


ROOT_URLCONF = 'web_app.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['website/templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.static',
                'django.template.context_processors.media',
            ],
            'libraries':{
                'trans2': 'web_app.translation_tags',
                'is_calculator_enabled': 'web_app.user_tags',
            }

        },
    },
]

WSGI_APPLICATION = 'web_app.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.10/ref/settings/#databases

DATABASES = {
    'default': {
                'ENGINE': 'django.db.backends.postgresql_psycopg2',
                'NAME': 'swiss_db',
                'USER': 'swiss_user',
                'PASSWORD': 'Asr58Fcq0Hbx4TglXv',
                'HOST': os.environ.get('CONFIG_DB_HOST', 'db'),
                'PORT': int(os.environ.get('CONFIG_DB_PORT', 5432)),
    }
}


# Password validation
# https://docs.djangoproject.com/en/1.10/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/1.10/topics/i18n/

LANGUAGE_CODE = 'pl-PL'

TIME_ZONE = 'Europe/Budapest'

USE_I18N = True

USE_L10N = True

USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.10/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')
MEDIA_URL = '/auction_photos/'
MEDIA_ROOT = BASE_DIR
FILE_UPLOAD_PERMISSIONS = 0o644

#PAGE_SIZE = 1000
PAGE_SIZE = 20

LOGIN_REDIRECT_URL = '/aukcje'
LOGIN_URL = '/zaloguj/'

# Marketing and campaigns settings
MARKETING_SOURCE_COOKIE_NAME = 'source_campaign'

# Backups
DBBACKUP_STORAGE = 'django.core.files.storage.FileSystemStorage'
DBBACKUP_STORAGE_OPTIONS = {'location': '/backups/'}

if DEBUG:
    INTERNAL_IPS = [
        # ...
        '127.0.0.1',
        '89.64.88.206',
        '2a02:a318:c043:4e80:35b0:26d3:c715:135c',
    '42.192.157.106',
    '127.0.0.1', 'localhost',
        # ...
    ]

    DEBUG_TOOLBAR_PANELS = [
        'debug_toolbar.panels.versions.VersionsPanel',
        'debug_toolbar.panels.timer.TimerPanel',
        'debug_toolbar.panels.settings.SettingsPanel',
        'debug_toolbar.panels.headers.HeadersPanel',
        'debug_toolbar.panels.request.RequestPanel',
        'debug_toolbar.panels.sql.SQLPanel',
        'debug_toolbar.panels.staticfiles.StaticFilesPanel',
        'debug_toolbar.panels.templates.TemplatesPanel',
        'debug_toolbar.panels.cache.CachePanel',
        'debug_toolbar.panels.signals.SignalsPanel',
        'debug_toolbar.panels.logging.LoggingPanel',
        'debug_toolbar.panels.redirects.RedirectsPanel',
    ]

    def show_toolbar(request):
        return True

    DEBUG_TOOLBAR_CONFIG = {
        'INTERCEPT_REDIRECTS': False,
        "SHOW_TOOLBAR_CALLBACK" : show_toolbar,
    }


# SENTRY INTEGRATION
sentry_sdk.init(
    dsn=os.environ.get('CONFIG_SENTRY_DSN'),
    integrations=[DjangoIntegration()],
    environment=os.environ.get('CONFIG_ENVIRONMENT', 'DEV'),
    debug=True if os.environ.get('CONFIG_SENTRY_DEBUG', 'False').lower() == 'true' else False,
    server_name=os.environ.get('CONFIG_HOSTNAME', 'dev.autazeszwajcarii.pl'),

    # Set traces_sample_rate to 1.0 to capture 100%
    # of transactions for performance monitoring.
    # We recommend adjusting this value in production,
    traces_sample_rate=float(os.environ.get('CONFIG_SENTRY_SAMPLE_RATE', 1.0)),

    # If you wish to associate users to errors (assuming you are using
    # django.contrib.auth) you may enable sending PII data.
    send_default_pii=True,

    # By default the SDK will try to use the SENTRY_RELEASE
    # environment variable, or infer a git commit
    # SHA as release, however you may want to set
    # something more human-readable.
    # release="myapp@1.0.0",
)
